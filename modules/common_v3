#%Module1.0
source /opt/Modules/extensions/extensions.tcl

set-basedir -root __CONDA_BASE__/__APPS_SUBDIR__ -package __CONDA_INSTALL_BASENAME__ -version envs/$::version
set rootdir [ string map [ list /envs/$::version {} ] $::basedir ]

inhibit-self-conflict

module load singularity

prepend-path PATH $rootdir/condabin

set mymod [file normalize [info script]]
set mydir [file dirname $mymod]
set myscripts [ file normalize __CONDA_BASE__/__SCRIPT_SUBDIR__/$::version.d/bin ]
set overlay_path [ string map {/conda/ /envs/} $::basedir ].sqsh

set launcher $myscripts/launcher.sh

prepend-path CONTAINER_OVERLAY_PATH $overlay_path
prepend-path SINGULARITYENV_PREPEND_PATH $::basedir/condabin

if {[module-info mode remove]} {
    if {$env(CONDA_SHLVL) > 1} {
        puts stderr "ERROR: Multiple ($::env(CONDA_SHLVL)) conda environments have been loaded, cannot unload with module"
        puts stderr "ERROR: Try 'conda deactivate' first"
        break
    }
}

# Name of this module's environment
set condaenv [lindex [split [module-info name] {/}] 1]

# Get the environment variables from 'conda activate'
set app_env [exec $launcher --cms_singularity_overlay_path $overlay_path /bin/env -i $mydir/condaenv.sh $rootdir $condaenv]

set lines [split $app_env '\n']
foreach line $lines {
    regexp {^([^=]*)=(.*)} $line -> key value
    if {[lsearch -exact {MODULEPATH PWD _ SHLVL} $key] >= 0} {
        continue
    }
    if {[string match *?PATH $key]} {
        # A *PATH variable to be prepended with a ':'
        prepend-path $key $value
        continue
    } elseif {[lsearch {_LMFILES_ LOADEDMODULES} $key] >= 0} {
        # Modulefile stuff that works like a path
        prepend-path $key $value
        continue
    } elseif {[string match PATH $key]} {
        # PATH itself (strip out the system paths to keep ordering correct)
        prepend-path SINGULARITYENV_PREPEND_PATH [regsub {:/usr/bin:/bin} $value {}]
        set path_entries [ split $value ':' ]
        ### Translate the in-container paths to their out-of-container symlink paths
        foreach entry $path_entries {
            if {[string match *$condaenv* $entry]} {
                prepend-path PATH $myscripts
            }
        }
        continue
    } elseif { [string match alias?* $key] } {
        set-alias [regsub {alias } $key {}] [ string map {\' {}} $value ]
        continue
    }
    setenv $key $value
}

### Extra env to get other things working
setenv  OMPI_MCA_orte_launch_agent $myscripts/orted